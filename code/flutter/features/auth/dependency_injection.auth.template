import 'package:get_it/get_it.dart';
import 'package:{{project_name}}/config/env_loader.dart';
// Auth feature
import 'package:{{project_name}}/features/auth/data/datasources/auth_datasource.dart';
import 'package:{{project_name}}/features/auth/data/repositories/auth_repository_impl.dart';
import 'package:{{project_name}}/features/auth/domain/repositories/auth_repository.dart';
import 'package:{{project_name}}/features/auth/domain/usecases/check_auth_status_usecase.dart';
import 'package:{{project_name}}/features/auth/domain/usecases/login_user.dart';
import 'package:{{project_name}}/features/auth/domain/usecases/logout_user.dart';
import 'package:{{project_name}}/features/auth/domain/usecases/register_user.dart';
import 'package:{{project_name}}/features/auth/domain/usecases/resend_verification_email.dart';
import 'package:{{project_name}}/features/auth/presentation/blocs/auth/auth_bloc.dart';
import 'package:{{project_name}}/features/auth/presentation/blocs/login/login_bloc.dart';
import 'package:{{project_name}}/features/auth/presentation/blocs/register/register_bloc.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import 'package:{{project_name}}/features/home/presentation/cubit/counter_cubit.dart';
import 'package:{{project_name}}/shared/language/cubit/language_cubit.dart';
import 'package:{{project_name}}/shared/theme/cubit/theme_cubit.dart';

final GetIt sl = GetIt.instance;

Future<void> configureDependencies() async {
  await _initSupabase();
  _initAuthFeature();
  _initSharedFeatures();
  // {{additional_initialization_calls}}
}

Future<void> _initSupabase() async {
  await Supabase.initialize(
    url: EnvLoader.supabaseUrl,
    anonKey: EnvLoader.supabaseAnonKey,
  );
  sl.registerLazySingleton<SupabaseClient>(() => Supabase.instance.client);
}

void _initAuthFeature() {
  sl.registerFactory(
    () => AuthBloc(
      checkAuthStatus: sl(),
      loginUser: sl(),
      logoutUser: sl(),
      registerUser: sl(),
      resendVerificationEmail: sl(),
    ),
  );
  sl.registerFactory(() => LoginBloc(authBloc: sl()));
  sl.registerFactory(() => RegisterBloc(authBloc: sl()));
  sl.registerLazySingleton(() => CheckAuthStatusUseCase(sl()));
  sl.registerLazySingleton(() => LoginUser(sl()));
  sl.registerLazySingleton(() => LogoutUser(sl()));
  sl.registerLazySingleton(() => RegisterUser(sl()));
  sl.registerLazySingleton(() => ResendVerificationEmail(sl()));
  sl.registerLazySingleton<AuthRepository>(
    () => AuthRepositoryImpl(dataSource: sl()),
  );
  sl.registerLazySingleton<AuthDataSource>(
    () => AuthDataSourceImpl(sl()),
  );
  // Register additional feature-specific dependencies
  sl.registerFactory<CounterCubit>(
    () => CounterCubit(),
  );
}

void _initSharedFeatures() {
  sl.registerLazySingleton(() => ThemeCubit());
  sl.registerLazySingleton(() => LanguageCubit());
}