import 'dart:async';
import 'package:flutter/material.dart';
import '../features/auth/presentation/screens/screens.dart';
import '../features/auth/presentation/blocs/auth/auth_barrel.dart';
import 'package:go_router/go_router.dart';
import 'package:{{project_name}}/features/home/presentation/screen/home_screen.dart';
import 'package:{{project_name}}/navigation/routes.dart';

class AppRouter {
  final AuthBloc authBloc;

  AppRouter({required this.authBloc});

  late final GoRouter router = GoRouter(
    initialLocation: AppRoutes.home,
    debugLogDiagnostics: true,
    redirect: (BuildContext context, GoRouterState state) {
      final authState = authBloc.state;
      final isAuthenticated = authState.status == AuthStatus.authenticated;
      final isAuthLoading = authState.status == AuthStatus.loading;
      final isInitial = authState.status == AuthStatus.initial;

      // Define route groups
      final isAuthRoute = state.matchedLocation.startsWith('/auth');
      final isLoginRoute = state.matchedLocation == AppRoutes.login;
      final isRegisterRoute = state.matchedLocation == AppRoutes.register;
      final isForgotPasswordRoute = state.matchedLocation == AppRoutes.forgotPassword;
      final isPublicRoute = isAuthRoute || isLoginRoute || isRegisterRoute || isForgotPasswordRoute;

      // Debug print to help diagnose issues
      debugPrint('Current route: ${state.matchedLocation}');
      debugPrint('Auth status: ${authState.status}');
      debugPrint('Is authenticated: $isAuthenticated');

      // If auth is loading or initial, allow current navigation
      if (isAuthLoading || isInitial) {
        debugPrint('Auth is loading or initial, allowing current navigation');
        return null;
      }

      // If on the auth landing page, direct to login
      if (state.matchedLocation == AppRoutes.auth) {
        debugPrint('On auth landing page, redirecting to login');
        return AppRoutes.login;
      }

      // If authenticated and trying to access auth routes, redirect to home
      if (isAuthenticated && isPublicRoute) {
        debugPrint(
            'Authenticated user trying to access auth route, redirecting to home');
        return AppRoutes.home;
      }

      // If not authenticated and trying to access protected route, redirect to login
      if (!isAuthenticated && !isPublicRoute) {
        debugPrint(
            'Unauthenticated user trying to access protected route, redirecting to login');
        return AppRoutes.login;
      }

      // No redirection needed
      debugPrint('No redirection needed');
      return null;
    },
    refreshListenable: GoRouterRefreshStream(authBloc.stream),
    routes: [
      // Auth routes
      GoRoute(
        path: AppRoutes.auth,
        builder: (context, state) => const AuthScreen(),
      ),
      GoRoute(
        path: AppRoutes.login,
        builder: (context, state) => const LoginScreen(),
      ),
      GoRoute(
        path: AppRoutes.register,
        builder: (context, state) => const RegisterScreen(),
      ),
      GoRoute(
        path: AppRoutes.forgotPassword,
        builder: (context, state) => const Scaffold(
          body: Center(child: Text('Forgot Password - To be implemented')),
        ),
      ),
      GoRoute(
        path: AppRoutes.home,
        builder: (context, state) => const HomeScreen(),
      ),
    ],
    errorBuilder: (context, state) => Scaffold(
      body: Center(
        child: Text('Route not found: ${state.matchedLocation}'),
      ),
    ),
  );
}

/// Helper class to convert Stream to Listenable
class GoRouterRefreshStream extends ChangeNotifier {
  late final StreamSubscription<dynamic> _subscription;

  GoRouterRefreshStream(Stream<dynamic> stream) {
    notifyListeners();
    _subscription = stream.asBroadcastStream().listen(
          (dynamic _) => notifyListeners(),
        );
  }

  @override
  void dispose() {
    _subscription.cancel();
    super.dispose();
  }
}